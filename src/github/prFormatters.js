const MAX_COMMENT_LENGTH = 65000;

export function generatePRBody(issueNumber, issueTitle, commitMessage, claudeResult) {
    const timestamp = new Date().toISOString();
    const isSuccess = claudeResult?.success || false;
    const executionTime = Math.round((claudeResult?.executionTime || 0) / 1000);

    let body = `## ü§ñ AI-Generated Solution\n\n`;
    body += `Resolves #${issueNumber}.\n\n`;
    body += `This Pull Request was automatically generated by Claude Code to address the issue: **${issueTitle}**\n\n`;
    
    body += `### üìã Execution Summary\n\n`;
    body += `- **Status**: ${isSuccess ? '‚úÖ Success' : '‚ùå Failed'}\n`;
    body += `- **Execution Time**: ${executionTime}s\n`;
    body += `- **Generated**: ${timestamp}\n`;
    
    if (claudeResult?.finalResult) {
        const result = claudeResult.finalResult;
        body += `- **Claude Turns**: ${result.num_turns || 'unknown'}\n`;
        body += `- **Cost**: $${result.cost_usd || 'unknown'}\n`;
        body += `- **Session ID**: \`${claudeResult.sessionId || 'unknown'}\`\n`;
    }
    
    body += `\n### üí¨ Implementation Details\n\n`;
    if (commitMessage) {
        body += `**Commit Message:**\n\`\`\`\n${commitMessage}\n\`\`\`\n\n`;
    }
    
    if (claudeResult?.summary) {
        body += `**Summary:**\n${claudeResult.summary}\n\n`;
    }
    
    body += `**Note:** Detailed conversation logs and execution details will be added as a comment below.\n\n`;
    body += `### ‚öôÔ∏è Review Guidelines\n\n`;
    body += `- Review the changes carefully before merging\n`;
    body += `- Test the implementation in your development environment\n`;
    body += `- Check that the solution addresses the original issue requirements\n`;
    body += `- Verify that no unintended changes were introduced\n\n`;
    body += `---\n*This PR was generated automatically by Claude Code. Full execution logs are available in the comments.*`;

    return body;
}

export function generateClaudeLogsComment(claudeResult, issueNumber) {
    let comment = `## üîç Claude Code Execution Logs\n\n`;
    comment += `**Issue**: #${issueNumber}\n`;
    comment += `**Session ID**: \`${claudeResult?.sessionId || 'unknown'}\`\n`;
    comment += `**Timestamp**: ${new Date().toISOString()}\n\n`;

    if (claudeResult?.finalResult) {
        const result = claudeResult.finalResult;
        comment += `### üìä Execution Statistics\n\n`;
        comment += `- **Success**: ${claudeResult.success ? 'Yes' : 'No'}\n`;
        comment += `- **Total Turns**: ${result.num_turns || 'unknown'}\n`;
        comment += `- **Execution Time**: ${Math.round((claudeResult.executionTime || 0) / 1000)}s\n`;
        comment += `- **Cost**: $${result.cost_usd || 'unknown'}\n`;
        comment += `- **Exit Code**: ${claudeResult.exitCode || 'unknown'}\n\n`;

        if (result.subtype === 'error_max_turns') {
            comment += `‚ö†Ô∏è **Note**: Maximum turns reached (${result.num_turns}). Consider breaking down complex tasks.\n\n`;
        }
    }

    if (claudeResult?.conversationLog && claudeResult.conversationLog.length > 0) {
        comment += `### üí¨ Conversation Summary\n\n`;
        comment += `Total messages exchanged: ${claudeResult.conversationLog.length}\n\n`;

        const recentMessages = claudeResult.conversationLog.slice(-5);
        comment += `<details>\n<summary>üó®Ô∏è Recent Conversation (Last 5 messages)</summary>\n\n`;
        
        let conversationSnippet = '';
        recentMessages.forEach((msg, index) => {
            if (msg.type === 'user') {
                const content = msg.message?.content || '[content unavailable]';
                conversationSnippet += `**User**: ${content.substring(0, 300)}${content.length > 300 ? '...' : ''}\n\n`;
            } else if (msg.type === 'assistant') {
                const content = msg.message?.content?.[0]?.text || '[content unavailable]';
                conversationSnippet += `**Claude**: ${content.substring(0, 300)}${content.length > 300 ? '...' : ''}\n\n`;
            }
        });

        if (comment.length + conversationSnippet.length > MAX_COMMENT_LENGTH - 1000) {
            conversationSnippet = conversationSnippet.substring(0, MAX_COMMENT_LENGTH - comment.length - 1000);
            conversationSnippet += '\n\n[Truncated due to length limits]\n';
        }

        comment += conversationSnippet;
        comment += `\n</details>\n\n`;
    }

    if (claudeResult?.rawOutput) {
        const outputLength = claudeResult.rawOutput.length;
        comment += `### üìÑ Raw Output\n\n`;
        comment += `- **Output Length**: ${outputLength.toLocaleString()} characters\n`;
        
        if (outputLength > 2000) {
            comment += `- **Preview** (first 2000 chars):\n\n`;
            comment += `\`\`\`\n${claudeResult.rawOutput.substring(0, 2000)}\n...\n[Output truncated]\n\`\`\`\n\n`;
        } else {
            comment += `- **Full Output**:\n\n`;
            comment += `\`\`\`\n${claudeResult.rawOutput}\n\`\`\`\n\n`;
        }
    }

    if (claudeResult?.modifiedFiles && claudeResult.modifiedFiles.length > 0) {
        comment += `### üìù Modified Files\n\n`;
        claudeResult.modifiedFiles.forEach(file => {
            comment += `- \`${file}\`\n`;
        });
        comment += '\n';
    }

    if (comment.length > MAX_COMMENT_LENGTH) {
        const truncatePoint = MAX_COMMENT_LENGTH - 200;
        comment = comment.substring(0, truncatePoint);
        comment += '\n\n[Comment truncated due to GitHub length limits]\n';
        comment += `\nFull logs are available in the system logs.`;
    }

    comment += `---\n*Generated by Claude Code*`;

    return comment;
}
