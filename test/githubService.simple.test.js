import { test, describe } from 'node:test';
import assert from 'node:assert';

describe('GitHub Service - Core Logic Tests', () => {
    
    test('should validate PR body generation logic', () => {
        // Test the logic for generating PR body content
        const issueNumber = 42;
        const issueTitle = 'Fix critical bug in authentication system';
        const commitMessage = 'fix(auth): resolve login validation issue\n\nFixed null pointer exception when validating user credentials.';
        const claudeResult = {
            success: true,
            executionTime: 15000,
            finalResult: {
                num_turns: 5,
                cost_usd: 0.15
            },
            sessionId: 'session-abc-123',
            summary: 'Fixed the authentication bug by adding proper null checks and error handling'
        };

        // Manually create PR body to test the logic (extracted from the actual function)
        const timestamp = new Date().toISOString();
        const executionTime = Math.round((claudeResult?.executionTime || 0) / 1000);
        
        let body = `## 🤖 AI-Generated Solution\n\n`;
        body += `Resolves #${issueNumber}.\n\n`;
        body += `This Pull Request was automatically generated by Claude Code to address the issue: **${issueTitle}**\n\n`;
        
        body += `### 📋 Execution Summary\n\n`;
        body += `- **Status**: ${claudeResult.success ? '✅ Success' : '❌ Failed'}\n`;
        body += `- **Execution Time**: ${executionTime}s\n`;
        body += `- **Generated**: ${timestamp}\n`;
        
        if (claudeResult?.finalResult) {
            const result = claudeResult.finalResult;
            body += `- **Claude Turns**: ${result.num_turns || 'unknown'}\n`;
            body += `- **Cost**: $${result.cost_usd || 'unknown'}\n`;
            body += `- **Session ID**: \`${claudeResult.sessionId || 'unknown'}\`\n`;
        }

        // Verify the body contains expected elements
        assert(body.includes('Resolves #42'));
        assert(body.includes('Fix critical bug in authentication system'));
        assert(body.includes('✅ Success'));
        assert(body.includes('15s'));
        assert(body.includes('Claude Turns**: 5'));
        assert(body.includes('Cost**: $0.15'));
        assert(body.includes('session-abc-123'));
        assert(body.length > 100, 'PR body should be substantial');
    });

    test('should validate commit message generation logic', () => {
        const issueNumber = 42;
        const issueTitle = 'Very Long Issue Title That Should Be Truncated to Fit in Commit Message Properly';
        
        // Generate structured commit message (extracted logic from repoManager)
        const shortTitle = issueTitle ? issueTitle.substring(0, 50).replace(/\s+/g, ' ').trim() : 'issue fix';
        const commitMessage = `fix(ai): Resolve issue #${issueNumber} - ${shortTitle}

Implemented by Claude Code. Full conversation log in PR comment.`;

        assert(commitMessage.includes('fix(ai): Resolve issue #42'));
        assert(commitMessage.includes('Very Long Issue Title That Should Be Truncated'));
        assert(commitMessage.includes('Implemented by Claude Code'));
        assert(commitMessage.length < 200, 'Commit message should be reasonably sized');
        
        // Verify the title was truncated properly
        const extractedTitle = commitMessage.match(/- (.+)/)[1].split('\n')[0];
        assert(extractedTitle.length <= 50, 'Title should be truncated to 50 characters');
    });

    test('should validate label update logic', () => {
        const currentLabels = ['bug', 'AI-processing', 'priority-high'];
        const labelsToRemove = ['AI-processing'];
        const labelsToAdd = ['AI-done'];

        // Calculate new labels set (extracted logic from actual function)
        const updatedLabels = [
            ...currentLabels.filter(label => !labelsToRemove.includes(label)),
            ...labelsToAdd.filter(label => !currentLabels.includes(label))
        ];

        assert.deepStrictEqual(updatedLabels, ['bug', 'priority-high', 'AI-done']);
    });
});