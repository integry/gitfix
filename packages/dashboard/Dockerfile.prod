# Multi-stage build for production deployment

# Stage 1: Build the client
FROM node:18-alpine as client-builder

WORKDIR /app/client

# Copy client package files
COPY client/package*.json ./
RUN npm ci

# Copy client source
COPY client/ ./

# Build the client with production environment
ARG VITE_API_BASE_URL
ARG VITE_APP_URL
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_APP_URL=${VITE_APP_URL}

RUN npm run build

# Stage 2: Setup the API server
FROM node:18-alpine

WORKDIR /app

# Install nginx for serving static files
RUN apk add --no-cache nginx

# Copy API package files
COPY package*.json ./
RUN npm ci --only=production

# Copy API source
COPY server.js ./
COPY auth.js ./

# Copy built client files
COPY --from=client-builder /app/client/dist /usr/share/nginx/html

# Create nginx configuration
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    root /usr/share/nginx/html; \
    index index.html; \
    \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    location /api { \
        proxy_pass http://localhost:4000; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection "upgrade"; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
}' > /etc/nginx/http.d/default.conf

# Create startup script
RUN echo '#!/bin/sh\n\
# Start nginx in background\n\
nginx\n\
# Start Node.js API server\n\
exec node server.js' > /app/start.sh && chmod +x /app/start.sh

EXPOSE 80 4000

CMD ["/app/start.sh"]